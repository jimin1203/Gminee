import os
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QTableWidget, QTableWidgetItem, QDialog, QLabel, QSpinBox, QHBoxLayout, QPushButton, QLineEdit, QHeaderView
from PyQt5.QtCore import Qt, QDate, QUrl, QTime, QTimer
from PyQt5.QtGui import QFont, QDesktopServices
from PyQt5.QtWidgets import QSizePolicy, QAbstractItemView


class CustomCalendar(QWidget):
    def __init__(self):
        super().__init__()
        self.assignments = {}   #assignments와 currentDate 변수 초기화
        self.currentDate = QDate.currentDate()

        self.initUI()      #initUI 메서드 호출 --> UI 초기화
        self.loadAssignmentsFromFile()   # loadAssignmentsFromFile 메서드 호출 --> 파일에서 로드

    def updateTime(self):     #현재 시각을 업데이트하고 time_label 레이블에 표시
        current_time = QTime.currentTime()
        time_text = current_time.toString("hh:mm:ss")
        self.time_label.setText("현재 시각 "+ time_text)
    
    def openWeatherPage(self):    #날씨 정보 보여줌
        url = QUrl("https://search.naver.com/search.naver?where=nexearch&sm=top_hty&fbm=0&ie=utf8&query=%EC%9D%B4%EB%B2%88%EC%A3%BC%EB%82%A0%EC%94%A8")
        QDesktopServices.openUrl(url)

    def initUI(self):
        self.layout = QVBoxLayout()
        self.resize(800, 600)

        # 현재 시각을 표시하는 레이블 추가
        self.time_label = QLabel()
        self.time_label.setFont(QFont("Arial", 20))
        self.layout.addWidget(self.time_label)

        self.setLayout(self.layout)

        # 1초마다 현재 시각 업데이트
        self.updateTime()
        timer = QTimer(self)
        timer.timeout.connect(self.updateTime)
        timer.start(1000)

        weather_button = QPushButton("이번 주 날씨 보러가기")
        weather_button.clicked.connect(self.openWeatherPage)
        self.layout.addWidget(weather_button)
        
        #QSpinBox 위젯을 생성하고 레이아웃에 추가.
        #yearSelector, monthSelector --> 현재 날짜를 기본 값으로 설정
        #값이 변경될 때 changeYear, changeMonth 호출
        self.yearSelector = QSpinBox()
        self.yearSelector.setRange(1900, 2100)
        self.yearSelector.setValue(self.currentDate.year())
        self.yearSelector.valueChanged.connect(self.changeYear)

        self.monthSelector = QSpinBox()
        self.monthSelector.setRange(1, 12)
        self.monthSelector.setValue(self.currentDate.month())
        self.monthSelector.valueChanged.connect(self.changeMonth)

        self.selectorsLayout = QHBoxLayout()
        self.selectorsLayout.addWidget(self.yearSelector)
        self.selectorsLayout.addWidget(self.monthSelector)

        self.layout.addLayout(self.selectorsLayout)

        #QTableWidget --> 달력 표시하는 테이블 위젯 생성, 레이아웃 추가
        self.tableWidget = QTableWidget()
        self.tableWidget.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.tableWidget.verticalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.tableWidget.setColumnCount(7)  # 한 주에 7일 표시

        #요일 이름 설정
        self.tableWidget.setHorizontalHeaderLabels(["일","월", "화", "수", "목", "금", "토"])

        #수직 헤더 숨김
        self.tableWidget.verticalHeader().setVisible(False)
        self.tableWidget.clicked.connect(self.showAssignment)   #셀 클릭 시 showAssignment 호출

        self.layout.addWidget(self.tableWidget)
        self.setLayout(self.layout)

    #날짜와 과제를 받아 해당 날짜의 과제 목록에 추가
    def addAssignment(self, date, assignment):
        key = date.toString("yyyy-MM-dd")    #날짜를 문자열로 변환하여 과제 목록에 추가
        if key in self.assignments:
            self.assignments[key].append(assignment)
        else:
            self.assignments[key] = [assignment]

        self.updateCalendar()    #달력 업데이트
        self.saveAssignmentsToFile()     #메서드 호출하여 과제를 파일에 저장

    #테이블 위젯에 있는 모든 셀을 지움
    def updateCalendar(self):
        self.tableWidget.clear()
        self.tableWidget.setRowCount(6)  # 행의 개수를 6으로 설정(월이 6주에 걸쳐 있을 수 있음)

        date = QDate(self.currentDate.year(), self.currentDate.month(), 1)  #첫 번째 날짜의 요일을 얻어온다.
        days_in_month = date.daysInMonth()

        startDayOfWeek = date.dayOfWeek()  # 첫째날이 무슨 요일인지 저장 월요일 : 1 일요일 : 7

        for day in range(1, days_in_month + 1):         # 해당 달이 총 몇 일인지 확인
            date.setDate(self.currentDate.year(), self.currentDate.month(), day)
            assignments = '\n'.join(self.assignments.get(date.toString("yyyy-MM-dd"), [])) #과제별로 줄바꿈

            item_text = f"{date.day()}\n{assignments}" #캘린더 텍스트
            item = QTableWidgetItem(item_text)
            item.setFlags(Qt.ItemIsEnabled)  
            item.setTextAlignment(Qt.AlignTop | Qt.AlignLeft)  #왼쪽 위부터 정렬
            self.tableWidget.setItem((day + startDayOfWeek - 1) // 7, ((day + startDayOfWeek - 1) % 7), item) # 날짜를 7일마다 자름. 캘린더 형식 만든다
        for i in range(6):
            for j in range(7):
                table_ob = self.tableWidget.item(i, j)
                item = QTableWidgetItem("")
                item.setFlags(item.flags() & ~Qt.ItemIsEnabled)
                if table_ob is not None:
                    continue
                else:
                    self.tableWidget.setItem(i, j, item) 

        self.tableWidget.setHorizontalHeaderLabels(["일","월", "화", "수", "목", "금", "토"])
        self.tableWidget.setSelectionMode(QAbstractItemView.SingleSelection)

        # 헤더 라벨 비활성화
        header = self.tableWidget.horizontalHeader()
        header.setSectionsClickable(False)

    def showAssignment(self, index):
        item = self.tableWidget.item(index.row(), index.column())
        if item and item.text():
            text = item.text()
            day, *assignments = text.split('\n')
            date = QDate(self.currentDate.year(), self.currentDate.month(), int(day))
            key = date.toString("yyyy-MM-dd")

            dialog = QDialog()
            layout = QVBoxLayout()

            dialog.setWindowTitle(key)
            dialog.resize(400, 300)

            for assignment in assignments:
                layout.addWidget(QLabel(assignment))
                
            input_line = QLineEdit()
            layout.addWidget(input_line)

            save_button = QPushButton("저장")
            save_button.clicked.connect(lambda: self.saveAssignment(key, input_line.text(), input_line, dialog))
            layout.addWidget(save_button)

            delete_button = QPushButton("삭제")
            delete_button.clicked.connect(lambda: self.deleteAssignment(key, input_line.text(), input_line, dialog))
            layout.addWidget(delete_button)

            dialog.setLayout(layout)
            dialog.exec_()

    def changeYear(self, year):
        newDate = self.currentDate.addYears(year - self.currentDate.year())
        self.currentDate = newDate
        self.updateCalendar()

    def changeMonth(self, month):
        newDate = self.currentDate.addMonths(month - self.currentDate.month())
        self.currentDate = newDate
        self.updateCalendar()

    def saveAssignment(self, key, assignment, input_line, dialog):
        if key in self.assignments:
            self.assignments[key].append(assignment)
        else:
            self.assignments[key] = [assignment]

        input_line.clear()  # Clear the input line
        self.updateCalendar()  # Update the calendar to reflect the saved assignment
        dialog.close()

        # Save assignments to a text file
        self.saveAssignmentsToFile()

    def deleteAssignment(self, key, assignment, input_line, dialog):
        try:
            if key in self.assignments:
                self.assignments[key].remove(assignment)

            input_line.clear()  # Clear the input line
            self.updateCalendar()  # Update the calendar to reflect the saved assignment
            dialog.close()

            # Save assignments to a text file
            self.saveAssignmentsToFile()
        except:
            return

    def saveAssignmentsToFile(self):
        with open('assignments.txt', 'w') as file:
            for date, assignments in self.assignments.items():
                file.write(f'{date}\n')
                for assignment in assignments:
                    file.write(f'{assignment}\n')
                file.write('\n')  # Empty line to separate dates

    def loadAssignmentsFromFile(self):
        if not os.path.exists('assignments.txt'):
            return

        with open('assignments.txt', 'r') as file:
            current_date = ''
            for line in file:
                line = line.strip()
                if line:
                    if '-' in line:  # Date line
                        current_date = line
                        self.assignments[current_date] = []
                    else:  # Assignment line
                        self.assignments[current_date].append(line)

        self.updateCalendar()

if __name__ == "__main__":
    app = QApplication([])
    calendar = CustomCalendar()
    calendar.show()
    app.exec_()

print("Hi, Python")
